import { Component, Inject, inject } from '@angular/core';
import { MatCardModule } from '@angular/material/card';
import { MAT_DIALOG_DATA, MatDialogModule, MatDialogRef } from '@angular/material/dialog';
import { <%= classify(name) %>ViewModel } from '../<%= dasherize(name) %>';
import { FormGroup, ReactiveFormsModule } from '@angular/forms';
import { <%= classify(name) %>Service } from '../<%= dasherize(name) %>.service';
import { CommonModule } from '@angular/common';
import { MatGridListModule } from '@angular/material/grid-list';
import { InputComponent, SelectComponent } from 'techteec-lib/controls';
import { MatButtonModule } from '@angular/material/button';
import { ConfirmService } from 'techteec-lib/dialogs-and-templates';
import { Unsubscriber } from 'techteec-lib/common';
import { filter } from 'rxjs';

@Component({
  selector: 'amr-<%= dasherize(name) %>-form',
  standalone: true,
  imports: [CommonModule, MatCardModule, MatGridListModule, ReactiveFormsModule, InputComponent, SelectComponent, MatButtonModule, MatDialogModule],
  templateUrl: './<%= dasherize(name) %>-form.component.html',
  styleUrl: './<%= dasherize(name) %>-form.component.scss'
})
export class <%= classify(name) %>FormComponent extends Unsubscriber {
  private <%= camelize(name) %>Service = inject(<%= classify(name) %>Service);
  private dialogRef = inject(MatDialogRef<<%= classify(name) %>FormComponent>)
  private confirm = inject(ConfirmService);
  frm: FormGroup;
  extraPropertyList = [
    {name: 'a', value: '1'},
    {name: 'b', value: '2'},
    {name: 'c', value: '3'}
  ]
  constructor(@Inject(MAT_DIALOG_DATA) public <%= camelize(name) %>?: <%= classify(name) %>ViewModel) {
    super();
    this.frm = this.<%= camelize(name) %>Service.createForm(<%= camelize(name) %>)
  }
  submit() {
    if(this.frm.invalid) {
      return;
    }
    this._otherSubscription = this.confirm.open({Message: 'Are you sure you want to proceed?'}).pipe(
      filter(confirmed => confirmed)
    ).subscribe(x => this.dialogRef.close(this.frm.value));
  }
  reset() {
    this._otherSubscription = this.confirm.open({Message: 'Are you sure you want to reset values?'}).pipe(
      filter(confirmed => confirmed)
    ).subscribe(x => {
      this.frm.setValue(this.<%= camelize(name) %>Service.createForm(this.<%= camelize(name) %>).value);
      this.frm.markAsUntouched();
    });
    
  }
}
